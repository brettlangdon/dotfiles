;; -*- mode: lisp; -*-
(prefer-coding-system 'utf-8)
(menu-bar-mode 0)
(setq inhibit-startup-message t)
(setq initial-scratch-message "")
(setq vc-follow-symlinks t)

(add-to-list 'load-path "~/.emacs.d/manual")
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("marmalade" . "https://marmalade-repo.org/packages/")
			 ("melpa" . "http://melpa.milkbox.net/packages/")
                         ("elpy" . "http://jorgenschaefer.github.io/packages/")))
(package-initialize)
(osx-clipboard-mode +1)

(load-theme 'monokai t)
(require 'powerline)
(powerline-default-theme)

(setq backup-inhibited t)
(setq auto-save-default nil)
(setq require-final-newline t)
(setq mode-require-final-newline t)
(define-key global-map (kbd "RET") 'newline-and-indent)
(add-hook 'before-save-hook 'delete-trailing-whitespace)
(setq-default indent-tabs-mode nil)

(global-hl-line-mode 1)
(set-face-background hl-line-face "#333")
(global-linum-mode 1)
(setq linum-format "%4d |")
(set-face-attribute 'linum nil :background "#000" :foreground "#FFF")
(global-git-gutter-mode 1)

(setq mouse-wheel-mode 0)
(setq mouse-wheel-up-event 0)
(setq mouse-wheel-down-event 0)
(require 'centered-cursor-mode)
(global-centered-cursor-mode +1)

(define-globalized-minor-mode global-fci-mode fci-mode (lambda () (fci-mode 1)))
(global-fci-mode 1)
(setq fci-rule-column 100)
(setq fci-rule-width 1)
(setq fci-rule-color "yellow")

(display-time-mode 1)
(display-battery-mode 1)

(helm-mode 1)
(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "C-x C-f") 'helm-find-files)
(projectile-global-mode 1)
(global-set-key (kbd "C-c p s a") 'helm-projectile-ack)
(global-subword-mode 1)

(add-hook 'flymake-find-file-hook (lambda()
                                    (flymake-cursor-mode)))
(add-hook 'markdown-mode-hook (lambda()
                                (require 'poly-markdown)
                                (poly-markdown-mode 1)
                                (flyspell-mode 1)
                                ;(setq fill-column 80)
                                ;(auto-fill-mode)
                                (setq fci-rule-column 80)))
(add-hook 'python-mode-hook (lambda()
                              (elpy-mode)
                              (elpy-enable)
                              (setq python-indent 4)
                              (setq elpy-rpc-backend "jedi")
                              (highlight-indentation-mode 0)))
(add-hook 'go-mode-hook (lambda()
                          (auto-complete-mode)
                          (require 'go-autocomplete)
                          (require 'auto-complete-config)
                          (ac-config-default)
                          (load-file "/Users/brettlangdon/go/src/golang.org/x/tools/cmd/oracle/oracle.el")
                          (load-file "~/go/src/github.com/golang/lint/misc/emacs/golint.el")
                          (require 'golint)
                          (setq gofmt-command "goimports")
                          (local-set-key (kbd "M-.") 'godef-jump)
                          (add-hook 'before-save-hook 'gofmt-before-save)))
(add-hook 'js-mode-hook (lambda()
                          (js2-minor-mode)
                          (auto-complete-mode)
                          (tern-mode t)
                          (require 'tern-auto-complete)
                          (tern-ac-setup)
                          (setq js-indent-level 2)
                          (require 'flycheck)
                          (setq-default flycheck-disabled-checkers '(javascript-jscs javascript-jshint))
                          (flycheck-mode t)))
(add-hook 'json-mode-hook (lambda()
                            (setq js-indent-level 2)))
(add-hook 'ruby-mode-hook (lambda()
                            (flyspell-prog-mode)))
(add-hook `css-mode-hook (lambda()
                           (set1 css-indent-offset 2)))

(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.styl\\'" . css-mode))
(add-to-list 'auto-mode-alist '("\\.scss\\'" . sass-mode))
(add-to-list 'auto-mode-alist '("\\.pug\\'" . jade-mode))
(add-to-list 'magic-mode-alist '("#!.*node" . js-mode))
